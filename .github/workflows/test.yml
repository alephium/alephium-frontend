name: Test

on:
  push:
    branches: [master]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Install pnpm package manager
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install NPM dependencies
        run: pnpm install

      - name: Use Node.js for vitest
        uses: actions/setup-node@v4
        with:
          node-version: 16

      - name: Run test scripts of all workspaces in parallel
        run: pnpm run test

  build-electron-app-unix:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Install pnpm package manager
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install NPM dependencies
        run: pnpm install

      - name: Extract platform name
        id: get-os
        run: echo "os=$(echo ${{ matrix.os }} | cut -d- -f1)" >> $GITHUB_OUTPUT
        shell: bash

      - name: Building desktop wallet on ${{ steps.get-os.outputs.os }}
        run: cd apps/desktop-wallet && pnpm run ci:build:electron:${{ steps.get-os.outputs.os }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Artifacts Directory
        if: startsWith(matrix.os, 'windows')
        shell: bash
        run: |
          mkdir ${GITHUB_WORKSPACE}/artifacts
          find .

      - name: Sign Artifact with CodeSignTool
        uses: sslcom/esigner-codesign@develop
        if: startsWith(matrix.os, 'windows')
        with:
          # Sign and timestamp code object.
          command: sign
          # SSL.com account username
          username: ${{ secrets.ES_USERNAME }}
          # SSL.com account password.
          password: ${{ secrets.ES_PASSWORD }}
          # Credential ID for signing certificate.
          credential_id: ${{ secrets.CREDENTIAL_ID }}
          # OAuth TOTP Secret (https://www.ssl.com/how-to/automate-esigner-ev-code-signing)
          totp_secret: ${{ secrets.ES_TOTP_SECRET }}
          # Path of code object to be signed. (DLL, JAR, EXE, MSI files vb... )
          file_path: 'dist/Alephium-2.2.0.exe'
          # Directory where signed code object(s) will be written.
          output_path: ${GITHUB_WORKSPACE}/artifacts
          # Scan code before sign
          malware_block: false
          # Environment Name, For Production 'PROD' or For Staging 'TEST'
          environment_name: PROD
