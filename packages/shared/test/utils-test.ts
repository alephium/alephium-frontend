import * as utils from '../src/utils'

describe('utils', function () {
  it('should return an array with unique entries', () => {
    expect(utils.uniq([1, 1, 1, 2])).toEqual([1, 2]),
      expect(utils.uniq([1, 1, 1, 2, 2])).toEqual([1, 2]),
      expect(utils.uniq(['x'])).toEqual(['x']),
      expect(utils.uniq(['x', 'y'])).toEqual(['x', 'y']),
      expect(utils.uniq(['x', 'y', 'y'])).toEqual(['x', 'y']),
      expect(utils.uniq([])).toEqual([]),
      expect(utils.uniq([1, '1'])).toEqual([1, '1'])
  })

  it('should return true if the url is a valid http url', () => {
    expect(utils.isValidRemoteHttpUrl('https://www.google.com')).toBe(true)
    expect(utils.isValidRemoteHttpUrl('http://www.google.com')).toBe(true)
    expect(utils.isValidRemoteHttpUrl('www.google.com')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('google.com')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('http://www.google.com')).toBe(true)
    expect(utils.isValidRemoteHttpUrl('https://www.google.com')).toBe(true)
    expect(utils.isValidRemoteHttpUrl('http://www.google.com/')).toBe(true)
    expect(utils.isValidRemoteHttpUrl('https://www.google.com/')).toBe(true)
    expect(utils.isValidRemoteHttpUrl('http://www.google.com/test')).toBe(true)
    expect(utils.isValidRemoteHttpUrl('https://www.google.com/test')).toBe(true)
    expect(utils.isValidRemoteHttpUrl('http://www.google.com/test?q=123')).toBe(true)
    expect(utils.isValidRemoteHttpUrl('https://www.google.com/test?q=123')).toBe(true)
    expect(utils.isValidRemoteHttpUrl('http://www.google.com/test#123')).toBe(true)
    expect(utils.isValidRemoteHttpUrl('https://www.google.com/test#123')).toBe(true)
    expect(utils.isValidRemoteHttpUrl('http://www.google.com/test?q=123#123')).toBe(true)
    expect(utils.isValidRemoteHttpUrl('https://www.google.com/test?q=123#123')).toBe(true)
    expect(utils.isValidRemoteHttpUrl('http://')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('https://')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('http://localhost:3000')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('https://localhost:3000')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('http://localhost:3000/')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('https://localhost:3000/')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('http://localhost:3000/test')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('https://localhost:3000/test')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('http://localhost:3000/test?q=123')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('https://localhost:3000/test?q=123')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('http://localhost:3000/test#123')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('https://localhost:3000/test#123')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('http://localhost:3000/test?q=123#123')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('https://localhost:3000/test?q=123#123')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('not-a-url')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('ftp://example.com')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('javascript:alert(1)')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('http:example.com')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('https:example.com')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('//example.com')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('http:/example.com')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('https:/example.com')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('http:///example.com')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('https:///example.com')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('http://.')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('http://..')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('http://example')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('http://example.')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('http://example..')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('http://123.123.123')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('http://123.123.123.')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('http://123.123.123.123.123')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('http://example.com:abc')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('http://example.com:-1')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('http://example.com:65536')).toBe(true)
    expect(utils.isValidRemoteHttpUrl('http://example.com:123:456')).toBe(false)
    expect(utils.isValidRemoteHttpUrl('https://example.com:8080')).toBe(true)
    expect(utils.isValidRemoteHttpUrl('https://subdomain.example.com')).toBe(true)
    expect(utils.isValidRemoteHttpUrl('https://sub.sub.example.com')).toBe(true)
    expect(utils.isValidRemoteHttpUrl('https://example.com/path/to/page')).toBe(true)
    expect(utils.isValidRemoteHttpUrl('https://example.com/path?param1=value1&param2=value2')).toBe(true)
    expect(utils.isValidRemoteHttpUrl('https://example.com/path#section')).toBe(true)
    expect(utils.isValidRemoteHttpUrl('https://123.123.123.123')).toBe(true)
  })
})
